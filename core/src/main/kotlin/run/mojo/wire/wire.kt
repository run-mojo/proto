package run.mojo.wire

import com.squareup.moshi.JsonAdapter
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.schema.ProtoType
import run.mojo.wire.compiler.ModelBuilder
import run.mojo.wire.model.EnumModel
import run.mojo.wire.model.Flavor
import run.mojo.wire.model.MessageModel

/**
 *
 */
enum class GenerationSource {
    /**
     * Generated through Reflection api.
     */
    REFLECT,
    /**
     * Generated by annotation compiler.
     */
    ANNOTATION,
}

val MESSAGE_AUTO_VALUE = "AUTO_VALUE"
val GOOGLE_PROTOBUF = "GOOGLE_PROTOBUF"
val SQUARE_WIRE = "SQUARE_WIRE"
val LOMBOK_DATA = "LOMBOK_DATA"
val LOMBOK_VALUE = "LOMBOK_VALUE"
val POJO = "POJO"
val KOTLIN_DATA = "KOTLIN_DATA"
val KOTLIN_CLASS = "KOTLIN_CLASS"

val BUILDER_AUTO_VALUE = "AUTO_VALUE"

fun toDescriptors(
    source: GenerationSource,
    provider: String,
    generated: Long,
    model: ModelBuilder
) {
    model.packages.values.map {
        it.nested.values.filter { it is EnumModel }.map { it as EnumModel }.map {
            EnumDescriptor(
                genSource = source,
                genProvider = provider,
                generated = generated,
                packageName = it.packageName,
                name = it.name,
                relativeName = it.relativeName,
                simpleName = it.simpleName,
                values = it.constants.map { EnumConstant(it.tag, it.name, it.name) }
            )
        }
    }
}

interface ActionProcessor {

}



/**
 *
 */
data class EnumDescriptor(
    val genSource: GenerationSource,
    val genProvider: String = "MOJO",
    val generated: Long,
    val packageName: String,
    val name: String,
    val relativeName: String,
    val simpleName: String,
    val values: List<EnumConstant>
)

/**
 *
 */
data class EnumConstant(val tag: Int, val name: String, val protoName: String)

/**
 *
 */
data class MessageDescriptor<T>(
    val version: Long,
    val genSource: GenerationSource,
    val genProvider: String = "MOJO",
    val generated: Long,
    val packageName: String,
    val name: String,
    val relativeName: String,
    val simpleName: String,
    val wireClassName: String,
    val inherits: List<ProtoType>,
    val fields: Map<String, FieldDescriptor>,
    val fieldsByTag: Map<Int, FieldDescriptor>,
    val flavor: Flavor,
    val adapters: Adapters<T>,
    val validExamples: List<ValidState> = emptyList()
)

/**
 *
 */
data class BuilderDescriptor(
    val provider: String,
    val fluentStyle: Boolean,
    val fluent: Boolean
)

/**
 *
 */
data class Adapters<T>(
    val proto: ProtoAdapter<T>,
    val json: JsonAdapter<T>
)

/**
 *
 */
data class FieldDescriptor(
    /**
     *
     */
    val name: String,
    /**
     *
     */
    val javaKind: JavaKind,

    val protoKind: ProtoKind,
    val jsonKind: JsonKind,
    /**
     *
     */
    val protoType: ProtoType,
    /**
     * Path
     */
    val declaring: List<ProtoType>,
    val defaultValue: Any?
)

data class ValidState(val fields: List<FieldDescriptor>)
